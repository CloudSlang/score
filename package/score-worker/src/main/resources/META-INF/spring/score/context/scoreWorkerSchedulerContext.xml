<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:task="http://www.springframework.org/schema/task"
		xsi:schemaLocation=
				"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

	<task:scheduler id="scoreWorkerScheduler" pool-size="5" />
	<task:scheduled-tasks scheduler="scoreWorkerScheduler">
		<task:scheduled ref="workerManager" method="workerKeepAlive" fixed-rate="#{keepAliveInterval}"/>
		<task:scheduled ref="workerManager" method="interruptCanceledExecutions" fixed-rate="#{interruptCanceledInterval}"/>
        <task:scheduled ref="workerConfiguration" method="refresh" fixed-delay="#{configRefreshInterval}"/>
		<task:scheduled ref="workerManager" method="logStatistics" fixed-rate="#{statisticsInterval}"/>
        <task:scheduled ref="sessionDataHandler" method="sessionTimeOutScheduler" fixed-rate="60000"/>
        <task:scheduled ref="workerExecutionMonitorService" method="executeScheduledWorkerMonitors" fixed-delay="#{scheduledWorkerMonitorInterval}"/>
        <task:scheduled ref="workerExecutionMonitorService" method="collectMonitorInformation" fixed-delay="#{workerMonitorRefreshInterval}"/>
        <task:scheduled ref="pythonExecutorLifecycleManagerService" method="pythonExecutorKeepAlive" fixed-delay="#{pythonExecutorKeepAliveInterval}"/>
	</task:scheduled-tasks>

    <task:scheduler id="scoreWorkerMetricScheduler" pool-size="2" />
    <task:scheduled-tasks scheduler="scoreWorkerMetricScheduler">
        <task:scheduled ref="workerMetricCollectorService" method="collectPerformanceMetrics"
                        fixed-delay= "#{T(org.apache.commons.lang3.StringUtils).isNotEmpty(systemProperties['metric.collection.interval']) ? systemProperties['metric.collection.interval'] : 10000}"/>
        <task:scheduled ref="workerMetricCollectorService" method="dispatchPerformanceMetrics"
                        fixed-delay="#{T(org.apache.commons.lang3.StringUtils).isNotEmpty(systemProperties['metric.dispatch.interval']) ? systemProperties['metric.dispatch.interval'] : 60000}"/>
    </task:scheduled-tasks>

    <!--
    This is a dedicated scheduler with fixed pool size of 1
    that handles draining of outbound buffer in order to prevent long waits of execution threads.
    -->
    <task:scheduler id="scoreOutboundBufferDrainer" pool-size="1" />
    <task:scheduled-tasks scheduler="scoreOutboundBufferDrainer">
        <task:scheduled ref="outBuffer" method="drain"
                fixed-delay="#{T(org.apache.commons.lang3.StringUtils).isNotEmpty(systemProperties['outbuffer.drain.period']) ? systemProperties['outbuffer.drain.period'] : '100'}"/>
    </task:scheduled-tasks>

    <!--Session timeout job-->
    <bean id="scoreSessionTimeout" class="java.lang.Long">
        <constructor-arg type="long" value="1800000"/>
    </bean>


</beans>